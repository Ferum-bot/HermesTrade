// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -destination test/service_mocks_test.go -package default_sync_spread_hunter_test
//

// Package default_sync_spread_hunter_test is a generated GoMock package.
package default_sync_spread_hunter_test

import (
	context "context"
	reflect "reflect"

	model "github.com/Ferum-Bot/HermesTrade/pkg/asset-spread-hunter/graph-algorithms/model"
	model0 "github.com/Ferum-Bot/HermesTrade/pkg/asset-spread-hunter/spread-hunter/model"
	gomock "go.uber.org/mock/gomock"
)

// MockassetGraphBuilder is a mock of assetGraphBuilder interface.
type MockassetGraphBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockassetGraphBuilderMockRecorder
}

// MockassetGraphBuilderMockRecorder is the mock recorder for MockassetGraphBuilder.
type MockassetGraphBuilderMockRecorder struct {
	mock *MockassetGraphBuilder
}

// NewMockassetGraphBuilder creates a new mock instance.
func NewMockassetGraphBuilder(ctrl *gomock.Controller) *MockassetGraphBuilder {
	mock := &MockassetGraphBuilder{ctrl: ctrl}
	mock.recorder = &MockassetGraphBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockassetGraphBuilder) EXPECT() *MockassetGraphBuilderMockRecorder {
	return m.recorder
}

// BuildGraphFromAssets mocks base method.
func (m *MockassetGraphBuilder) BuildGraphFromAssets(ctx context.Context, assets []model0.AssetCurrencyPair) (model.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGraphFromAssets", ctx, assets)
	ret0, _ := ret[0].(model.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGraphFromAssets indicates an expected call of BuildGraphFromAssets.
func (mr *MockassetGraphBuilderMockRecorder) BuildGraphFromAssets(ctx, assets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGraphFromAssets", reflect.TypeOf((*MockassetGraphBuilder)(nil).BuildGraphFromAssets), ctx, assets)
}

// MockcyclesSpreadConverter is a mock of cyclesSpreadConverter interface.
type MockcyclesSpreadConverter struct {
	ctrl     *gomock.Controller
	recorder *MockcyclesSpreadConverterMockRecorder
}

// MockcyclesSpreadConverterMockRecorder is the mock recorder for MockcyclesSpreadConverter.
type MockcyclesSpreadConverterMockRecorder struct {
	mock *MockcyclesSpreadConverter
}

// NewMockcyclesSpreadConverter creates a new mock instance.
func NewMockcyclesSpreadConverter(ctrl *gomock.Controller) *MockcyclesSpreadConverter {
	mock := &MockcyclesSpreadConverter{ctrl: ctrl}
	mock.recorder = &MockcyclesSpreadConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcyclesSpreadConverter) EXPECT() *MockcyclesSpreadConverterMockRecorder {
	return m.recorder
}

// ConvertCyclesToSpreads mocks base method.
func (m *MockcyclesSpreadConverter) ConvertCyclesToSpreads(ctx context.Context, cycles []model.GraphCycle) ([]model0.Spread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertCyclesToSpreads", ctx, cycles)
	ret0, _ := ret[0].([]model0.Spread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertCyclesToSpreads indicates an expected call of ConvertCyclesToSpreads.
func (mr *MockcyclesSpreadConverterMockRecorder) ConvertCyclesToSpreads(ctx, cycles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertCyclesToSpreads", reflect.TypeOf((*MockcyclesSpreadConverter)(nil).ConvertCyclesToSpreads), ctx, cycles)
}

// MockprofitabilityComparer is a mock of profitabilityComparer interface.
type MockprofitabilityComparer struct {
	ctrl     *gomock.Controller
	recorder *MockprofitabilityComparerMockRecorder
}

// MockprofitabilityComparerMockRecorder is the mock recorder for MockprofitabilityComparer.
type MockprofitabilityComparerMockRecorder struct {
	mock *MockprofitabilityComparer
}

// NewMockprofitabilityComparer creates a new mock instance.
func NewMockprofitabilityComparer(ctrl *gomock.Controller) *MockprofitabilityComparer {
	mock := &MockprofitabilityComparer{ctrl: ctrl}
	mock.recorder = &MockprofitabilityComparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofitabilityComparer) EXPECT() *MockprofitabilityComparerMockRecorder {
	return m.recorder
}

// ProfitabilityIsGreaterThan mocks base method.
func (m *MockprofitabilityComparer) ProfitabilityIsGreaterThan(source, than model0.SpreadProfitability) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfitabilityIsGreaterThan", source, than)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProfitabilityIsGreaterThan indicates an expected call of ProfitabilityIsGreaterThan.
func (mr *MockprofitabilityComparerMockRecorder) ProfitabilityIsGreaterThan(source, than any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfitabilityIsGreaterThan", reflect.TypeOf((*MockprofitabilityComparer)(nil).ProfitabilityIsGreaterThan), source, than)
}

// ProfitabilityIsLessThan mocks base method.
func (m *MockprofitabilityComparer) ProfitabilityIsLessThan(source, than model0.SpreadProfitability) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfitabilityIsLessThan", source, than)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProfitabilityIsLessThan indicates an expected call of ProfitabilityIsLessThan.
func (mr *MockprofitabilityComparerMockRecorder) ProfitabilityIsLessThan(source, than any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfitabilityIsLessThan", reflect.TypeOf((*MockprofitabilityComparer)(nil).ProfitabilityIsLessThan), source, than)
}

// MockgraphCyclesSearcher is a mock of graphCyclesSearcher interface.
type MockgraphCyclesSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockgraphCyclesSearcherMockRecorder
}

// MockgraphCyclesSearcherMockRecorder is the mock recorder for MockgraphCyclesSearcher.
type MockgraphCyclesSearcherMockRecorder struct {
	mock *MockgraphCyclesSearcher
}

// NewMockgraphCyclesSearcher creates a new mock instance.
func NewMockgraphCyclesSearcher(ctrl *gomock.Controller) *MockgraphCyclesSearcher {
	mock := &MockgraphCyclesSearcher{ctrl: ctrl}
	mock.recorder = &MockgraphCyclesSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgraphCyclesSearcher) EXPECT() *MockgraphCyclesSearcherMockRecorder {
	return m.recorder
}

// SearchAllCycles mocks base method.
func (m *MockgraphCyclesSearcher) SearchAllCycles(ctx context.Context, graph model.Graph) ([]model.GraphCycle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllCycles", ctx, graph)
	ret0, _ := ret[0].([]model.GraphCycle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllCycles indicates an expected call of SearchAllCycles.
func (mr *MockgraphCyclesSearcherMockRecorder) SearchAllCycles(ctx, graph any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllCycles", reflect.TypeOf((*MockgraphCyclesSearcher)(nil).SearchAllCycles), ctx, graph)
}
