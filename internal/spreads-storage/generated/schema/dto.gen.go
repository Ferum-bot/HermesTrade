// Package dto provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package dto

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Asset defines model for Asset.
type Asset struct {
	ExternalIdentifier  int64 `json:"external_identifier"`
	UniversalIdentifier int64 `json:"universal_identifier"`
}

// AssetCurrencyPair defines model for AssetCurrencyPair.
type AssetCurrencyPair struct {
	BaseAsset     Asset               `json:"base_asset"`
	CurrencyRatio CurrencyRatio       `json:"currency_ratio"`
	Identifier    *openapi_types.UUID `json:"identifier,omitempty"`
	QuotedAsset   Asset               `json:"quoted_asset"`
}

// AssetCurrencyPairWithLinks defines model for AssetCurrencyPairWithLinks.
type AssetCurrencyPairWithLinks struct {
	BaseAsset     Asset              `json:"base_asset"`
	CurrencyRatio CurrencyRatio      `json:"currency_ratio"`
	Identifier    openapi_types.UUID `json:"identifier"`
	PairLink      string             `json:"pair_link"`
	QuotedAsset   Asset              `json:"quoted_asset"`
	SourceLink    string             `json:"source_link"`
}

// CurrencyRatio defines model for CurrencyRatio.
type CurrencyRatio struct {
	Precision int64 `json:"precision"`
	Value     int64 `json:"value"`
}

// Spread defines model for Spread.
type Spread struct {
	Elements        []AssetCurrencyPair `json:"elements"`
	Identifier      openapi_types.UUID  `json:"identifier"`
	MetaInformation struct {
		FoundAt              time.Time                  `json:"found_at"`
		ProfitabilityPercent SpreadProfitabilityPercent `json:"profitability_percent"`
		SpreadLength         int64                      `json:"spread_length"`
	} `json:"meta_information"`
}

// SpreadFoundDateFilter defines model for SpreadFoundDateFilter.
type SpreadFoundDateFilter struct {
	EndFoundDate   *time.Time `json:"end_found_date,omitempty"`
	StartFoundDate *time.Time `json:"start_found_date,omitempty"`
}

// SpreadFull defines model for SpreadFull.
type SpreadFull struct {
	Elements        []AssetCurrencyPairWithLinks `json:"elements"`
	Identifier      openapi_types.UUID           `json:"identifier"`
	MetaInformation struct {
		FoundAt              time.Time                  `json:"found_at"`
		ProfitabilityPercent SpreadProfitabilityPercent `json:"profitability_percent"`
		SpreadLength         int64                      `json:"spread_length"`
	} `json:"meta_information"`
}

// SpreadLengthFilter defines model for SpreadLengthFilter.
type SpreadLengthFilter struct {
	MaxSpreadLength *int64 `json:"max_spread_length,omitempty"`
	MinSpreadLength *int64 `json:"min_spread_length,omitempty"`
}

// SpreadProfitabilityFilter defines model for SpreadProfitabilityFilter.
type SpreadProfitabilityFilter struct {
	MaxProfitabilityPercent *SpreadProfitabilityPercent `json:"max_profitability_percent,omitempty"`
	MinProfitabilityPercent *SpreadProfitabilityPercent `json:"min_profitability_percent,omitempty"`
}

// SpreadProfitabilityPercent defines model for SpreadProfitabilityPercent.
type SpreadProfitabilityPercent struct {
	Precision int64 `json:"precision"`
	Value     int64 `json:"value"`
}

// PostSpreadsStorageApiV1GetSpreadsJSONBody defines parameters for PostSpreadsStorageApiV1GetSpreads.
type PostSpreadsStorageApiV1GetSpreadsJSONBody struct {
	Identifiers []string `json:"identifiers"`
}

// PutSpreadsStorageApiV1SaveSpreadsJSONBody defines parameters for PutSpreadsStorageApiV1SaveSpreads.
type PutSpreadsStorageApiV1SaveSpreadsJSONBody struct {
	Spreads []Spread `json:"spreads"`
}

// PostSpreadsStorageApiV1SearchSpreadsJSONBody defines parameters for PostSpreadsStorageApiV1SearchSpreads.
type PostSpreadsStorageApiV1SearchSpreadsJSONBody struct {
	FoundDateFilter     *SpreadFoundDateFilter     `json:"found_date_filter,omitempty"`
	LengthFilter        *SpreadLengthFilter        `json:"length_filter,omitempty"`
	ProfitabilityFilter *SpreadProfitabilityFilter `json:"profitability_filter,omitempty"`
}

// PostSpreadsStorageApiV1SearchSpreadsParams defines parameters for PostSpreadsStorageApiV1SearchSpreads.
type PostSpreadsStorageApiV1SearchSpreadsParams struct {
	Offset int64 `form:"offset" json:"offset"`
	Limit  int64 `form:"limit" json:"limit"`
}

// PostSpreadsStorageApiV1GetSpreadsJSONRequestBody defines body for PostSpreadsStorageApiV1GetSpreads for application/json ContentType.
type PostSpreadsStorageApiV1GetSpreadsJSONRequestBody PostSpreadsStorageApiV1GetSpreadsJSONBody

// PutSpreadsStorageApiV1SaveSpreadsJSONRequestBody defines body for PutSpreadsStorageApiV1SaveSpreads for application/json ContentType.
type PutSpreadsStorageApiV1SaveSpreadsJSONRequestBody PutSpreadsStorageApiV1SaveSpreadsJSONBody

// PostSpreadsStorageApiV1SearchSpreadsJSONRequestBody defines body for PostSpreadsStorageApiV1SearchSpreads for application/json ContentType.
type PostSpreadsStorageApiV1SearchSpreadsJSONRequestBody PostSpreadsStorageApiV1SearchSpreadsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get spreads by identifiers
	// (POST /spreads-storage/api/v1/get-spreads)
	PostSpreadsStorageApiV1GetSpreads(w http.ResponseWriter, r *http.Request)
	// Save found spreads to storage
	// (PUT /spreads-storage/api/v1/save-spreads)
	PutSpreadsStorageApiV1SaveSpreads(w http.ResponseWriter, r *http.Request)
	// Search spreads by parameters
	// (POST /spreads-storage/api/v1/search-spreads)
	PostSpreadsStorageApiV1SearchSpreads(w http.ResponseWriter, r *http.Request, params PostSpreadsStorageApiV1SearchSpreadsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get spreads by identifiers
// (POST /spreads-storage/api/v1/get-spreads)
func (_ Unimplemented) PostSpreadsStorageApiV1GetSpreads(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save found spreads to storage
// (PUT /spreads-storage/api/v1/save-spreads)
func (_ Unimplemented) PutSpreadsStorageApiV1SaveSpreads(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search spreads by parameters
// (POST /spreads-storage/api/v1/search-spreads)
func (_ Unimplemented) PostSpreadsStorageApiV1SearchSpreads(w http.ResponseWriter, r *http.Request, params PostSpreadsStorageApiV1SearchSpreadsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostSpreadsStorageApiV1GetSpreads operation middleware
func (siw *ServerInterfaceWrapper) PostSpreadsStorageApiV1GetSpreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpreadsStorageApiV1GetSpreads(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutSpreadsStorageApiV1SaveSpreads operation middleware
func (siw *ServerInterfaceWrapper) PutSpreadsStorageApiV1SaveSpreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSpreadsStorageApiV1SaveSpreads(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSpreadsStorageApiV1SearchSpreads operation middleware
func (siw *ServerInterfaceWrapper) PostSpreadsStorageApiV1SearchSpreads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSpreadsStorageApiV1SearchSpreadsParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpreadsStorageApiV1SearchSpreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/spreads-storage/api/v1/get-spreads", wrapper.PostSpreadsStorageApiV1GetSpreads)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/spreads-storage/api/v1/save-spreads", wrapper.PutSpreadsStorageApiV1SaveSpreads)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/spreads-storage/api/v1/search-spreads", wrapper.PostSpreadsStorageApiV1SearchSpreads)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+VwRuj0r8o8PQ+S3b0KJAH4x62IAVgcBIJ/taiWTIk1Ej0P8+kJQsyZIa",
	"2XWGbdibQ/E+3n3ffUfmicUyV1KAIMNWT8zEO8i5+3lnDJD9obRUoAnBLcMXAi14FmECgjBF0HY5lTrn",
	"xFYMBf34AwsZHRT4P2ELmpUhKwTuQZvzQ8uQaXgsUEPCVh8HMxhBvz+CyYdPEJNNw9X1S6E1iPiw5qj7",
	"NT5wAxGv6/9eQ8pW7LtZQ9Ws4mnmSSpDFleAkeaE8rmw+vgPbnMZshFGigKThhBDGsXWbn8sJEFyVoon",
	"JLZKPIHr1TKJxD+Qdu9RfDb/QjYVRx1lKD7b3dfgOmRGFjqGMdATLTp93I5spxZ+q2RdlnoqKQ0xGpRi",
	"opv3PCvgEvv6wLB14FC2G6WBJwPjJ4O8HlZIkJtJknTsXh6P41rzwwUNkwPxCIXfV1HWTTOVhUgiTn5i",
	"8lxlFmE5X7y+mb+6Wc5/m/+0WixXy9d/srA5L+EEN4Q5DHaplikSf8AM6RAp0DGIZxvS07huh66rSNul",
	"7muUgdjS7hItuwBhU/ZYun2pv+aFo9gDlI83zRubxK+c4A1mBAPjHUQS+Uwt4VeUyBDX9BLQ5XixRZa9",
	"hEuaef6/Xf7bdnnvshnzSs6/ROfXHbIcRXQRXyNZdjT5WrIvoLut5eqwE0tdNyf9g+9rG2O7zeInYGKN",
	"yhud2fkU3K3fBQmkKNCuBqnUgS/V3GxIar6FwIDeYwy3Nh8kZ/+TLSxk9oHvYRe389u5LUsqEFwhW7FX",
	"bsk+mWjnGJqZCsB4gBlXONsvZlugm+qTI1IaR68l13nlXcJWbC0NVQlU598p/H3xFupV5lkCQz/L5GAB",
	"YimokoorlWHs0GafjNfIN0VfyMbC3XHdm2jdKTw6CMygPm67UVIYf+pyPj8r50m3SOtK6udbhietcZdl",
	"gZuAQa2G3WOKPOf6wFbsLVD9JXg4BO0KQ0Z8a2zdH4A0wh7qhmL3FmRMesP30NG+GJK+GFJ+w/dwbelb",
	"mZzB77O9UMNO64NF37SbIo7BmMDSdSKKpaGrWkAyMEeL1rq4fdM0Aa7j3cWO3LjwRhnFNc+BnJs+PjG0",
	"9TwWoA8sZILnjo009f81NaSRLiBs6TRhSA5jZ5jjt0LfX6u/mpdolB6vzAkGPnlAlyHzd/hZKJ13Re9B",
	"dg7S0N0/cH/+rUPuGgPOt257xrWa92TEdd1Uln8FAAD///B8O2a5EwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
