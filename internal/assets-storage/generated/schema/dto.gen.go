// Package dto provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package dto

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Asset defines model for Asset.
type Asset struct {
	ExternalIdentifier  int64 `json:"external_identifier"`
	UniversalIdentifier int64 `json:"universal_identifier"`
}

// AssetCurrencyPair defines model for AssetCurrencyPair.
type AssetCurrencyPair struct {
	BaseAsset     Asset               `json:"base_asset"`
	CurrencyRatio CurrencyRatio       `json:"currency_ratio"`
	Identifier    *openapi_types.UUID `json:"identifier,omitempty"`
	QuotedAsset   Asset               `json:"quoted_asset"`
}

// AssetSourceFilter defines model for AssetSourceFilter.
type AssetSourceFilter struct {
	SourceIdentifiers []int64 `json:"source_identifiers"`
}

// AssetTypeFilter defines model for AssetTypeFilter.
type AssetTypeFilter struct {
	UniversalIdentifiers []int64 `json:"universal_identifiers"`
}

// CurrencyRatio defines model for CurrencyRatio.
type CurrencyRatio struct {
	Precision int64 `json:"precision"`
	Value     int64 `json:"value"`
}

// RequestAssetCurrencyPair defines model for RequestAssetCurrencyPair.
type RequestAssetCurrencyPair struct {
	BaseAsset     Asset         `json:"base_asset"`
	CurrencyRatio CurrencyRatio `json:"currency_ratio"`
	QuotedAsset   Asset         `json:"quoted_asset"`
}

// TimeFilter defines model for TimeFilter.
type TimeFilter struct {
	AddedAfter *time.Time `json:"added_after,omitempty"`
}

// PutAssetsStorageApiV1AddAssetsJSONBody defines parameters for PutAssetsStorageApiV1AddAssets.
type PutAssetsStorageApiV1AddAssetsJSONBody struct {
	AssetPairs []RequestAssetCurrencyPair `json:"asset_pairs"`
}

// PutAssetsStorageApiV1AddAssetsParams defines parameters for PutAssetsStorageApiV1AddAssets.
type PutAssetsStorageApiV1AddAssetsParams struct {
	XHermesTradeAssetSourceIdentifier int `json:"X-HermesTrade-Asset-Source-Identifier"`
}

// PostAssetsStorageApiV1GetAssetsJSONBody defines parameters for PostAssetsStorageApiV1GetAssets.
type PostAssetsStorageApiV1GetAssetsJSONBody struct {
	SourceFilter *AssetSourceFilter `json:"source_filter,omitempty"`
	TimeFilter   *TimeFilter        `json:"time_filter,omitempty"`
	TypeFilter   *AssetTypeFilter   `json:"type_filter,omitempty"`
}

// PostAssetsStorageApiV1GetAssetsParams defines parameters for PostAssetsStorageApiV1GetAssets.
type PostAssetsStorageApiV1GetAssetsParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutAssetsStorageApiV1AddAssetsJSONRequestBody defines body for PutAssetsStorageApiV1AddAssets for application/json ContentType.
type PutAssetsStorageApiV1AddAssetsJSONRequestBody PutAssetsStorageApiV1AddAssetsJSONBody

// PostAssetsStorageApiV1GetAssetsJSONRequestBody defines body for PostAssetsStorageApiV1GetAssets for application/json ContentType.
type PostAssetsStorageApiV1GetAssetsJSONRequestBody PostAssetsStorageApiV1GetAssetsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add assets currency pairs to assets storage
	// (PUT /assets-storage/api/v1/add-assets)
	PutAssetsStorageApiV1AddAssets(w http.ResponseWriter, r *http.Request, params PutAssetsStorageApiV1AddAssetsParams)
	// Get assets currency pairs from storage
	// (POST /assets-storage/api/v1/get-assets)
	PostAssetsStorageApiV1GetAssets(w http.ResponseWriter, r *http.Request, params PostAssetsStorageApiV1GetAssetsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Add assets currency pairs to assets storage
// (PUT /assets-storage/api/v1/add-assets)
func (_ Unimplemented) PutAssetsStorageApiV1AddAssets(w http.ResponseWriter, r *http.Request, params PutAssetsStorageApiV1AddAssetsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get assets currency pairs from storage
// (POST /assets-storage/api/v1/get-assets)
func (_ Unimplemented) PostAssetsStorageApiV1GetAssets(w http.ResponseWriter, r *http.Request, params PostAssetsStorageApiV1GetAssetsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PutAssetsStorageApiV1AddAssets operation middleware
func (siw *ServerInterfaceWrapper) PutAssetsStorageApiV1AddAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAssetsStorageApiV1AddAssetsParams

	headers := r.Header

	// ------------- Required header parameter "X-HermesTrade-Asset-Source-Identifier" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-HermesTrade-Asset-Source-Identifier")]; found {
		var XHermesTradeAssetSourceIdentifier int
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-HermesTrade-Asset-Source-Identifier", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-HermesTrade-Asset-Source-Identifier", valueList[0], &XHermesTradeAssetSourceIdentifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-HermesTrade-Asset-Source-Identifier", Err: err})
			return
		}

		params.XHermesTradeAssetSourceIdentifier = XHermesTradeAssetSourceIdentifier

	} else {
		err := fmt.Errorf("Header parameter X-HermesTrade-Asset-Source-Identifier is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-HermesTrade-Asset-Source-Identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAssetsStorageApiV1AddAssets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAssetsStorageApiV1GetAssets operation middleware
func (siw *ServerInterfaceWrapper) PostAssetsStorageApiV1GetAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAssetsStorageApiV1GetAssetsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAssetsStorageApiV1GetAssets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/assets-storage/api/v1/add-assets", wrapper.PutAssetsStorageApiV1AddAssets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/assets-storage/api/v1/get-assets", wrapper.PostAssetsStorageApiV1GetAssets)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yVTW/zNgzHv4qh7WjXTjoMnW/ZgHa9FW0wDCuCQLXolIUtKXoJGhT+7oMkp3FjOy9D",
	"gT23hBbJP6kfqQ9SiFoKDtxokn8QXbxCTf3PmdZg3A+phARlELwZ3g0oTqslMuAGSwTlzKVQNTUkJ8jN",
	"r7+QmJithPAXVqBIExPLcQNKX+7axETB2qICRvLnQQUj0RefwcTLGxTGyfB1/WGVAl5sHyiqfo0vVMOS",
	"7ur/WUFJcvJTum9V2vYpDU1qYlK0AZeKGhSn3HbpH/3hJiYjHbEW2b4h2ijkK3d8bYUBdpHEgyZ2SjwI",
	"16tltIlPwqoCbrEyMNBE7b92bsNb0UCtzwSmtVCl6LZXwED4UaHzrRyVOcTN9yodzjAk9isWPalSQYEa",
	"BT9T1YZWFv7LhAXHuJNwSO0jrC1o80PO0/8+IHOsR5GjjLlgZfsR3mktK+c+zSY3SXadTLN59ls+mebT",
	"m39IvL8+Rg0kBmvo74Smp8GZkJe+dwx0oVAazw65tVUVzR7uIwYlcnTWqBQq8o3QyZMRiq4g0qA2WMCV",
	"S4bGC/x6gsTEgR2CTq6yq8xVLiRwKpHk5NqbYiKpefWFpzT46+CfUonpZpJSxpLwxffK+htzDXPd5feM",
	"5OTBBs50m3om8a/JjLFg9DkUrcH42X3+IOgkvQJl/m3gtHbq/07+BFWDnivKIPGuSdhhyX33KdljYJSF",
	"uH0Unaje3CzCadDmd8G27kghuAHuS6BSVlj4ItI3HcZ2H+uACadmKSkeLJ9j4I4O4KmN1E22GADHH9dS",
	"cB3ETbNJn6InWxSgdaRA2yrMj7Z1TdXWgcJYFK402g1L5PNFRuw+6E+KDF25a2vxIgsXa4SVFZguK0IP",
	"wSL0AC13YI7SsragtntYRFmGYT9y+/Gwa4U1nvD8Nm7aZ7D8XDUnN92XV9uRgvW5/p2l1iJ2SeLOKzy4",
	"rvrUZRc15qyZOWdYmvgS1O/AjKBeKlEfpbxp/g0AAP//WX0l94ALAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
